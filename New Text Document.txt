Chapter 1
In OO design, the attributes and behaviors are contained within a single object, whereas in procedural, or structured, design the attributes and behaviors are normally separated.

Encapsulation is defined by the fact that objects contain both attributes and behaviors. Data hiding is a major part of encapsulation.


For data hiding to work properly, all attributes should be declared as private. Thus, attributes are never part of the interface. Only the public methods are part of the class interface. Declaring an attribute as public breaks the concept of data hiding


If you control the access to the attribute, when a problem arises, you do not have to worry about tracking down every piece of code that might have changed the attribute—it can be changed in only one place (the setter).
From a security perspective, you don’t want uncontrolled code to change or retrieve sensitive data. For example, when you use an ATM, access to data is controlled by asking for a PIN.
When you tell somebody to draw a shape, the first question asked is, “What shape?” No one can draw a shape, because it is an abstract concept (in fact, the draw method in the Shape code following contains no implementation). You must specify a concrete shape. To do this, you provide the actual implementation in Circle. Even though Shape has a draw method, Circle overrides this method
and provides its own draw method. Overriding basically means replacing an implementation of a parent with one from a child.
• Encapsulation—Encapsulating the data and behavior into a single object is of
primary importance in OO development. A single object contains both its data and
behaviors and can hide what it wants from other objects.
• Inheritance—A class can inherit from another class and take advantage of the
attributes and methods defined by the superclass.
• Polymorphism—Polymorphism means that similar objects can respond to the same message in different ways. For example, you might have a system with many shapes. However, a circle, a square, and a star are each drawn differently. Using polymorphism, you can send each of these shapes the same message (for example, Draw), and each shape is responsible for drawing itself.
• Composition—Composition means that an object is built from other objects.

Chapter 2
Three important things you can do to develop a good sense of the OO thought process are covered in this chapter:
• Knowing the difference between the interface and implementation
• Thinking more abstractly
• Giving the user the minimal interface possible


Knowing your end users is always the most important issue when doing any kind of design.



